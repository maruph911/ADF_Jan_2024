{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "1azuredatafactory101"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Inremental_load_Daynamic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LKP_OldwaterMarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select TableName,Watermarkvalue as Oldwatermarkvalue from\nwatermarktable \nwhere TableName=@{pipeline().parameters.TableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_TargetDB_Watermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LKP_NewwaterMarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select Max(@{pipeline().parameters.WaterMarkColumn}) as NewWatermarkvalue from @{pipeline().parameters.TableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_SourceDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy_Orders",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LKP_NewwaterMarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LKP_OldwaterMarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * \nFROM @{pipeline().parameters.TableName} \nWHERE @{pipeline().parameters.WaterMarkColumn} > '@{activity('LKP_OldWaterMarkValue').output.firstRow.OldWaterMarkValue}'\n  AND @{pipeline().parameters.WaterMarkColumn} <= '@{activity('LKP_NewWaterMarkValue').output.firstRow.NewWaterMarkValue}'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_SourceDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_TargetDB_DynamicTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Update_WatermarkValue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_Orders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"NewTime": {
									"value": {
										"value": "@activity('LKP_NewwaterMarkValue').output.firstRow.NewwatermarkValue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('LKP_OldwaterMarkValue').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_TargetDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Orders"
					},
					"WaterMarkColumn": {
						"type": "string",
						"defaultValue": "InserDateTime"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-01T11:26:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Inremental_load_Orders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is use to incrementally load data from source to Target",
				"activities": [
					{
						"name": "LKP_OldwaterMarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select TableName,Watermarkvalue as Oldwatermarkvalue from\nwatermarktable \nwhere TableName='Orders'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_TargetDB_Watermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LKP_NewwaterMarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select Max(InsertDateTime) as NewWatermarkvalue from [dbo].[orders]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_SourceDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy_Orders",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LKP_NewwaterMarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LKP_OldwaterMarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * \nFROM Orders \nWHERE InsertDateTime > '@{activity('LKP_OldWaterMarkValue').output.firstRow.OldWaterMarkValue}'\n  AND InsertDateTime <= '@{activity('LKP_NewWaterMarkValue').output.firstRow.NewWaterMarkValue}'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "OrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 10
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Quantity",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "InsertDateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "InsertDateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_TargetDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_TargetDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update_WatermarkValue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_Orders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"NewTime": {
									"value": {
										"value": "@activity('LKP_NewwaterMarkValue').output.firstRow.NewwatermarkValue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('LKP_OldwaterMarkValue').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_TargetDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-01T07:30:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Customer_Purchase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Storage_demobitsadlsgen2_PurchaseOrder",
								"type": "DatasetReference"
							},
							"name": "PurchaseOrder"
						},
						{
							"dataset": {
								"referenceName": "DS_Storage_demobitsadlsgen2_OLTP_Customer",
								"type": "DatasetReference"
							},
							"name": "Customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Storage_demobitsadlsgen2_CustomerPurchases",
								"type": "DatasetReference"
							},
							"name": "Output",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1linkedservice",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "PurchaswOrderProjected"
						},
						{
							"name": "CustomerProjected"
						},
						{
							"name": "DataQuality"
						},
						{
							"name": "JoinedStream"
						},
						{
							"name": "CustomerPurchases"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PurchaseOrderID as short,",
						"          CustomerCode as short,",
						"          ProductCode as short,",
						"          EmployeeCode as boolean,",
						"          PurchaseOrderDate as date,",
						"          Quantity as short,",
						"          UnitPrice as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PurchaseOrder",
						"source(output(",
						"          CustomerCode as short,",
						"          CustomerName as string,",
						"          Adress as string,",
						"          PhoneNumber as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customer",
						"PurchaseOrder select(mapColumn(",
						"          CustomerCode,",
						"          Quantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PurchaswOrderProjected",
						"Customer select(skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CustomerProjected",
						"PurchaswOrderProjected filter(greater(Quantity, 0)) ~> DataQuality",
						"DataQuality, CustomerProjected join(PurchaswOrderProjected@CustomerCode == CustomerProjected@CustomerCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinedStream",
						"JoinedStream aggregate(groupBy(CustomerProjected@CustomerCode,",
						"          CustomerName),",
						"     ProductPurchase = sum(Quantity)) ~> CustomerPurchases",
						"CustomerPurchases sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CustomerCode,",
						"          CustomerName,",
						"          ProductPurchase",
						"     )) ~> Output"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ExecuteDataFlowCustomerPurchases')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Retry",
				"activities": [
					{
						"name": "DataFlowCustomerPurchase",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Customer_Purchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PurchaseOrder": {},
									"Customer": {},
									"Output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-10T18:00:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Customer_Purchase')]"
			]
		}
	]
}